=head1 Project description

The C<project> block defines global properties and requirements for the project.
Unlike rule files, this block is not purely declarative and there may only be
one. While the rule translator is free to move around declarations, the project
block defines an order in which requirements are tested. This order is honoured
by the translator.

=begin code MakePP

   project 'MakePP' {
      version: '0.1'
      contact: 'makepp@xinutec.org'

      config_header: config.h

      section 'some checks' {
         ...
      }
   }

=end code MakePP

=head3 section

Configure time checks are grouped in sections for better readability. Each
section is introduced with a message in the configure script output.

=head3 library

In a C<project> context, C<library> checks whether a library is installed and a
program can be linked against it.

=begin code MakePP

   # GNU Multiprecision Library, can be disabled with --without-gmp,
   # if all targets defined in Rules files that link to it are optional.
   library gmp {
      symbol: mpz_init
      header: gmp.h
      # You may optionally add a description to each check. This will cause it
      # to appear in the summary at the end of a configure run.
      'Build with GNU Multiprecision Library support'
   }

=end code MakePP

The above C<library> directive defines the following variables:

=over

=item $gmp_available

A shell variable is defined in the configure script with the value C<"yes"> or
C<"no">. The variable name is normalised, i.e. any character that is not a valid
shell identifier (such as '-') is transliterated to '_'.

=item GMP

An uppercased and normalised version of the library name is provided as an
C<automake> conditional. It can therefore be used in rules files in conditional
contexts or in included C<automake> rule files.

=item GMP_AVAILABLE

An uppercased and normalised version suffixed with C<_AVAILABLE> is provided in
the config header, so that C code can conditionally compile parts based on
library availability. This macro is defined to 0 or 1.

=back

=head3 headers/functions

The C<headers> section can be used to check for additional headers. C<functions>
checks whether a list of functions is available.

=begin code MakePP

   headers {
      # Valgrind runtime support
      valgrind/valgrind.h
   }
   functions {
      # New POSIX signal handling
      sigaction
   }

=end code MakePP

This directive only defines C<HAVE_> variables in the config header.

=head3 arg_enable

This directive adds an option to the resulting configure script. The content of
this directive is a descriptive string that is shown when configure is passed
C<--help>, followed by more directives that are evaluated if the argument is
C<yes>. A default may be given. This default may be C<yes> or C<no> or a
backtick-string, which is evaluated at configure time. Thus, the following two
are equivalent:

=begin code MakePP

   arg_enable my-sub-package = yes { 'Also build sub-package' }
   arg_enable my-sub-package = `echo yes` { 'Also build sub-package' }

=end code MakePP

This adds the option C<--enable-my-sub-package> and defines the following
variables:

=over

=item $my_sub_package_enabled

A normalised version of the argument name is set to the passed value. This
variable is added to the configure script.

=item MY_SUB_PACKAGE

An automake conditional is created, as well. This means that a previously
asserted condition, e.g. the existence of a library, can be explicitly disabled
by the user. Thus, by adding C<arg_enable gmp>, you can let the user decide
explicitly that even though GMP is available, he does not want to build any
component that uses it.

=item MY_SUB_PACKAGE_ENABLED

Analogously to the config header macro set by the C<library> directive, the
C<arg_enable> directive sets a macro with an normalised and uppercased name to 0
or 1, depending on the user's choice.

=back

=head4 options

Instead of a yes/no, you can define your own options.

=begin code MakePP

   arg_enable app = iphone {
      'Build an app for this software. Only one app can be chosen'
      options {
         android => {
            # check for additional libraries
         }
         iphone => {
            warning 'Support for iPhones is unstable.'
         }
         no => {
            # no app is being built
         }
         # optional catch-all option
         _ => {
            error 'No support for the $app phone planned.'
         }
      }
   }

=end code MakePP

The defined variables and macros are the same as with the normal yes/no
C<arg_enable>, except that the config header gets one macro per option, which is
defined to 1 if that option is selected. Thus, C<--enable-app=android> will
define C<APP_ANDROID> to 1.

=head3 cflags

The C<cflags> directive tries to compile a simple program with the passed flags
and adds them to the named variable or C<CFLAGS> by default.

=begin code MakePP

   # Adds to CFLAGS
   cflags {
      -pipe
      -ggdb3
      -pedantic
      -ansi
   }
   # Adds to HIDDEN_CFLAGS
   cflags HIDDEN_CFLAGS {
      -fvisibility=hidden
   }

=end code MakePP

Each of the flags is tested separately in the order listed. The set added to the
variable is the subset of flags that work together.

=head3 Additional checks

These are checks from autoconf. They translate to C<AC_> followed by the check
name, uppercased.

=over

=item c_bigendian

=item c_typeof

=item alignof

Translates to C<AC_CHECK_ALIGNOF>.

=item sizeof

Translates to C<AC_CHECK_SIZEOF>.

=back

The following are new:

=over

=item c_charset

Defines C<HAVE_EBCDIC> if the character set is EBCDIC, does nothing if the
character set is ASCII, fails if it can't detect the character set.

=item c_enum_fwdecl

Check for ability to typedef enums before definition. Defines
C<HAVE_ENUM_FWDECL> to 1 if so.

=item c_variadic_templates

Check whether the C++ compiler supports C++0x lambdas. Defines C<HAVE_LAMBDA> to
1 if so.

=item c_late_expansion

Check whether the preprocessor supports ANSI conforming late macro expansion.
Defines the C preprocessor macro C<HAVE_LATE_EXPANSION> to 1 if so.

=item c_stmt_exprs

Checks whether the C compiler supports the GNU extension of brace-expressions:
C<({ code; })>. Defines C<HAVE_STMT_EXPRS> to 1 if the compiler supports braced
statements within expressions.

=item c_token_paste

Checks if the preprocessor implements ANSI-style token pasting (with C<##>).
Defines the C preprocessor macro C<HAVE_ANSI_PASTE> to 1 if so.

=item c_variadic_templates

Check whether the C++ compiler supports C++0x variadic templates. Defines the
C preprocessor macro C<HAVE_VARIADIC_TEMPLATES> to 1 if so.

=item c_stdint_h

Checks for the existence of C<stdint.h> types and defines appropriate types in
case of absence. As a side effect, this also checks for the size of every
built-in integer type and C<void *>. This directive will enforce that
C<sizeof(char) == 1>. This should be the case for standard conforming
implementations. The following types are asserted:

=over

=item size_t

=item uint8_t

=item uint16_t

=item uint32_t

=item uint64_t

=item uintmax_t

=item uintptr_t

=item int8_t

=item int16_t

=item int32_t

=item int64_t

=item intmax_t

=item intptr_t

=back

=back
