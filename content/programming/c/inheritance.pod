=head1 Inheritance

Languages such as Java, C# and C++ have object oriented features such as
classes, inheritance, runtime type information and virtual function calls. I
often hear that it's impossible to write object oriented code in a language
that does not directly support it. Most notably, people seem to think this of
C. I am going to show that it is entirely possible, even convenient and
entirely feasible to write object oriented C.

=head2 Single inheritance

Single inheritance means the derived class earns all data and function members
from its base class. There are several ways to achieve this in C. The most
common method is not the most transparent one, but it is probably the most
consistent and maintainable one.

=head3 Child objects (has-a)

Modelling is-a relationships with has-a is the easiest way to simulate
inheritance. All you need to take care of is accessing the right values in
those included objects. In C++, one can implicitly convert pointers to derived
classes to pointers to their base. One can construct a new object of base type
from an object of derived type (often called slicing, because only the base
part of the object is retained). In C, this implicit construction is not
possible. Consider the following C++ code:

=begin code CPP

  // C++ code:
  struct base {
    char a;
    int b;
  };

  struct derived : base {
    int c;
    char d;
  };

  void function () {
    derived d;
    base b = d;
    base *bp = &d;
    bp->b = d.a; // <- either
    bp->b = d.base::a; // <- or
  }

=end code CPP

In this code, an object of type C<derived> is created, then an object of type
C<base> is created and the derived object is sliced to form the base object.
The address of C<d> is then implicitly converted to C<base *> to form the
pointer C<bp>. The last two lines are equivalent in that they both access the
member C<a> in the base class and assign it to C<b> in the base class using
the base pointer.

=begin code CPP

  // C code:
  struct base {
    char a;
    int b;
  };

  struct derived {
    struct base base;
    int c;
    char d;
  };

  void function () {
    struct derived d;
    struct base b = d.base; // <- either (bad for long inheritance lines)
    struct base b2 = *(struct base *)&d; // <- or
    struct base *bp = (struct base *)&d;
    bp->b = d.base.a; // <- either (bad)
    bp->b = ((struct base *)&d)->a; // <- or
  }

=end code CPP

In long lines with several levels of inheritance, base accesses become
cumbersome and casting is probably the way to go. (Think of
C<d-&gt;base.base.base.base.base.base.a = 3> versus
C<((struct somebase *)d)-&gt;a = 3>.


=head3 #include members (is-a)

A more transparent way to simulate the above is to use the preprocessor
directive C<#include> to inherit the base members. The advantage of this is
that member accesses are completely transparent, the disadvantage is that the
data members are going to be spread over many small files.

=begin code CPP

  // base-members.h
    char a;
    int b;

  // base.h
  struct base {
  #include "base-members.h"
  };

  // derived-members.h
  #include "base-members.h"
    int c;
    char d;

  // derived.h
  struct derived {
  #include "derived-members.h"
  };

  // main.c
  void function () {
    struct derived d;
    struct base b = *(struct base *)&d;
    struct base *bp = (struct base *)&d;
    bp->b = d.a; // <- works fine for long inheritance lines
  }

=end code CPP

As you can see, the client code for this is cleaner. There is no visible base
object. The casts are all valid, because the beginning of both structs are
equal. This way, you can easily extend to arbitrary inheritance levels. Data
members are simply inherited and casting derived pointers to base pointers is
perfectly valid.


=head2 Polymorphic data structures

When writing a programming language compiler, you will likely need an abstract
syntax tree (AST). Without such a thing, it is hard to impossible to implement
things such as C++ templates, where you need to copy an entire subtree,
replace template parameters with their arguments and resume typechecking. So,
you need an AST. Such trees are usually directed acyclic graphs consisting of
many nodes of different types pointing at other nodes in the graph. A simple
example could be:

=begin code CPP

  struct node {
  };

  enum op { ADD, SUB, MUL, DIV };

  // a OP b
  struct operation : node {
    node *lhs; // a
    enum op op; // +, -, *, /
    node *rhs; // b
  };

  struct integer : node {
    int value;
  };

=end code CPP

Now you can build an expression tree from an expression like C<3 + 2 * 7 / 3>.
If you want to evaluate the tree, you need to somehow find out what type of
node it is that was on the left or right hand side of the operation. It could
be another operation or an integer. C++ gives us a convenient tool that makes
the evaluation almost entirely transparent [1]. By using runtime type
information, C++ can identify the actual type that was chosen to create the
object, rather than the type of the pointer that is currently pointing at it.

TODO: you do it with tags.


=head2 Links

=over

=item [1] L<Visitor pattern|http://en.wikipedia.org/wiki/Visitor_pattern>

=back
